for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater",conf.level = 0.95)$p.value > 0.05){
print("significant")
}
}
}
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value > 0.05){
print("significant")
}
}
}
# first checks general changes in abundances in all samples (ex. b cells)
by_vs_am <- abun %>% group_by(sample, ct, section)
by_vs <- by_vs_am %>% summarise(meanct = mean(Avg))
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value > 0.05){
print("significant")
}
}
}
by_vs_am <- abun %>% group_by(sample, ct, section)
by_vs <- by_vs_am %>% summarise(meanct = mean(Avg))
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct,by_vs_ct$meanct, alternative = "greater")$p.value > 0.05){
print("significant")
}
}
}
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct)$p.value > 0.05){
print("significant")
}
}
}
by_vs_am <- abun %>% group_by(sample, ct, section)
by_vs <- by_vs_am %>% summarise(meanct = mean(Avg))
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value > 0.05){
print("significant")
}
}
}
by_vs_am <- abun %>% group_by(sample, ct, section)
by_vs <- by_vs_am %>% summarise(meanct = mean(Avg))
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value < 0.05){
print("significant")
}
}
}
# first checks general changes in abundances in infiltrates (ex. b cells)
by_vs_am <- abun %>% group_by(sample, ct, section, inf)
by_vs <- by_vs_am %>% summarise(meanct = mean(Avg))
by_vs
# first checks general changes in abundances in infiltrates (ex. b cells)
by_vs_am <- abun %>% group_by(sample, ct, section, inf)
newinf = ""
for (i in by_vs_am$inf){
if (i == "inf") newinf = c(newinf,"inf")
else newinf = c(newinf,"rest")
}
newinf = newinf[-1]
by_vs_am$inf = newinf
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i) & by_vs_ct$sinf == "inf",]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value < 0.05){
print("significant")
}
}
}
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i) & by_vs_ct$inf == "inf",]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value < 0.05){
print("significant")
}
}
}
by_vs_ct$inf
# first checks general changes in abundances in infiltrates (ex. b cells)
by_vs_am <- abun %>% group_by(sample, ct, section, inf)
newinf = ""
for (i in by_vs_am$inf){
if (i == "inf") newinf = c(newinf,"inf")
else newinf = c(newinf,"rest")
}
newinf = newinf[-1]
by_vs_am$inf = newinf
by_vs_am$inf
by_vs_am$inf[0:3]
y
y
by_vs_am$inf[0:3]
# first checks general changes in abundances in infiltrates (ex. b cells)
by_vs_am <- abun %>% group_by(sample, ct, section, inf)
by_vs_am$inf[0:3]
for (i in by_vs_am$inf){
newinf = c(newinf,i[1:3])
}
newinf
i[1:3]
as.character(i)[1:3]
as.character(i)
as.character(i)[[1:3]]
as.character(i)(0)
as.character(i)[:3]
for (i in by_vs_am$inf){
newinf = c(newinf,substr(i, start = 1, stop = 3))
}
newinf
# first checks general changes in abundances in infiltrates (ex. b cells)
by_vs_am <- abun %>% group_by(sample, ct, section, inf)
newinf = ""
for (i in by_vs_am$inf){
newinf = c(newinf,substr(i, start = 1, stop = 3))
}
newinf
newinf = newinf[-1]
by_vs_am$inf = newinf
by_vs <- by_vs_am %>% summarise(meanct = mean(Avg))
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i) & by_vs_ct$inf == "inf",]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value < 0.05){
print("significant")
}
}
}
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) {
print("no cells")
next}
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i) & by_vs_ct$inf == "inf",]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value < 0.05){
print("significant")
}
}
}
by_vs_am <- abun %>% group_by(sample, ct, section)
by_vs <- by_vs_am %>% summarise(meanct = mean(Avg))
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value < 0.05){
print("significant")
}
}
}
### DE analysis for RA 3dst ###
# removes all glob variables from env
rm(list = ls())
# Loading libraries
suppressMessages(suppressWarnings(library(devtools,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(gplots,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(destiny,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(dpt,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(scran,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(plot3D,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(Rtsne,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(jackstraw,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(rgl,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(gdata,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(ggplot2,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(akima,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(matrixStats,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(cowplot,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(pheatmap,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(stringr,warn.conflicts = F, quietly = T)))
suppressMessages(suppressWarnings(library(grid,warn.conflicts = F, quietly = T)))
setwd('/Users/svickovi/Library/Mobile Documents/com~apple~CloudDocs/Desktop/morphoSPOT/3dst_repo/3dst/de_analysis')
#setwd('/Users/sanjavickovic/Desktop/morphoSPOT/3dst_repo/3dst/de_analysis')
# Which samples do you want to use?
norm_samples = "RA1"
# Where are you norm expression R files located?
path_samples = "../data/"
# Set output directory that will contain all cell_typing pdf plots and output gene files
path_output = "../../../plot_outputs/"
# Source f(x) file
source('../functions/Read_Functions.R') # in ./functions
# Load data as R objects for selected RA patient
files_norm = list.files(pattern = glob2rx(paste0(norm_samples, "_norm.exp.values.*")), path = path_samples)
norm_mat_loaded_in_env = ""
section_labels = ""
all_ann_inf = ""
for (i in 1:length(files_norm)){
load(paste0(path_samples, files_norm[i]))
load(paste0(path_samples, norm_samples, "_", i, "_selected_adjusted_spots_3D_manual_app"))
assign(paste0("inf_s", i), read.csv(paste0("../data/", norm_samples, "_", i, "_all_inf.csv"), header = T, row.names = 1)) # files found on SCP
norm_mat_loaded_in_env = c(norm_mat_loaded_in_env, paste0("m", i) )
section_labels = c(section_labels, sapply(strsplit(colnames(get(paste0("m", i))), "_"), "[[", 1))
all_ann_inf = c(all_ann_inf, row.names(get(paste0("inf_s", i))))
}
norm_mat_loaded_in_env = norm_mat_loaded_in_env[-1]
section_labels = section_labels[-1]
all_ann_inf = all_ann_inf[-1]
# Combine all the norm data in one matrix
RA.norm = do.call(mbind, mget(norm_mat_loaded_in_env))
RA.norm[is.na(RA.norm)] <- 0
m = RA.norm # this is a combined matrix for all sections from a single RA patient # precaution
### Take only infiltrates that are present in all sections according to annotations
inf_all = read.csv(paste0("../data/", norm_samples, "_zstack_Infs.csv"), header = T)
# Subset per infiltrate as the naming ie. Inf1 presumes we are following the same infiltrate (given 3D alignment) in all present sections
all_inf = ""
for (i in 1:length(unique(inf_all$Inf.))){
assign(paste0("RA.norm.inf", i), as.matrix(RA.norm[,colnames(RA.norm) %in% row.names(subset(inf_all, inf_all$Inf. == paste0("Inf", i)))]))
all_inf = c(all_inf, colnames(get(paste0("RA.norm.inf", i)))) # Make an object with all annotated infiltrates
}
all_inf = all_inf[-1]
### Make avg gene exp barplot per inf and section
gen_names = c("CD52","MS4A1","FN1") # list of marker genes
# Calculate avg gene expression per inf and section
for (i in 1:length(unique(inf_all$Inf.))){
assign(paste0("inf", i, "_rm"), rm_section(get(paste0("RA.norm.inf", i))[gen_names,]))
assign(paste0("sd", i, "_rm"), sd_section(get(paste0("RA.norm.inf", i))[gen_names,]))
assign(paste0("s", i, "_rm"), size_section(get(paste0("RA.norm.inf", i))[gen_names,]))
}
# Plot avg gene expression for each Inf separately
myplots <- vector("list", length(unique(inf_all$Inf.)))
for(i in 1:length(unique(inf_all$Inf.))){
myData = data.frame(as.numeric(get(paste0("inf", i, "_rm"))),as.numeric(sweep(get(paste0("sd", i, "_rm")), 2, sqrt(get(paste0("s", i, "_rm"))), "/")))
colnames(myData) = c("Avg", "SEM")
nms = ""
for (j in 1:length(unique(section_labels))){
nms = c(nms, paste0("Section",j, "_", gen_names))
}
nms = nms[-1]
row.names(myData) = nms
limits <- aes(ymax = Avg + SEM, ymin = Avg - SEM)
myplots[[i]] <- ggplot(data = myData, aes(x = factor(sapply(strsplit(row.names(myData), split = "_"),"[[",1)), y = Avg, fill = rep(c("Gene1: CD52","Gene2: MS4A1","Gene3: FN1"), length(unique(section_labels))))) + geom_bar(stat = "identity", position = position_dodge(0.99)) +
geom_errorbar(limits, position = position_dodge(0.99), width = 0.25) +
labs(x = "", y = "Avg expression") +
scale_fill_manual(name = "Gene", values=c("#066799",  "#7392CB","#CDCC63")) +
labs(title = paste0("Infiltrate ", i))
}
save_plot(paste0(path_output,"Average_genes_per_infiltrate_", norm_samples, ".pdf"), plot_grid(plotlist=myplots), ncol = 3, nrow = 2)
# Run analysis on infiltrates only
#k = 2 #RA1
#k = 3 #RA2
#k = 3 #RA3
#k = 3 #RA4
#k = 2 #RA5
col.inf.clusters = run_inf_analysis(RA.norm[,colnames(RA.norm) %in% all_inf], k=2, norm_samples, path_output) # number of clusters
# Run spatial clustering analysis on all ST spots per biopsy
#f = 4 #RA1
#f = 3 #RA2
#f = 3 #RA3
#f = 4 #RA4
#f = 4 # RA5
col.spatial.clusters = run_spatial_cluster_analysis(RA.norm, 4, read_tsne_from_memory="yes", norm_samples, path_output)
# Which barcodes and clusters are part of the annotated infiltrates?
inf_per_cluster(RA.norm, all_ann_inf, col.spatial.clusters)
#### Make barplot of avg expression per interesting marker genes
gen_names = c("LTB","CCL19","CXCL13","CD52","MS4A1","CD79A","TYROBP", "MMP3", "FN1", "VCAM1")
save_plot(paste0(path_output,"Average_genes_per_cluster_", norm_samples, ".pdf"), avg_genes_barplot(RA.norm, gen_names, col.spatial.clusters), ncol = 1, nrow = 1)
# Make Barplot for avg gene expression per cluster group
avg_genes_barplot = function(all_bar, gen_names, cluster_names){
all_bar = RA.norm
#### Make barplot of avg expression per interesting marker genes
cluster_names = col.spatial.clusters
# gen_names = c("CCL19","CXCL13","LTB","PRG4","MMP3","CD52","MS4A1","FN1","TYROBP") #, "CD79A", "CD79B", "TYROBP"
col.scale = unique(cluster_names[,1])
### arrange matrix per cluster
# all_bar = mbind(mg1, mg2, mg3, mg4)
all_bar = all_bar[row.names(all_bar) %in% gen_names,]
all_bar = all_bar[,match(colnames(all_bar), rownames(cluster_names))]
all_bar = all_bar[match(rownames(all_bar), gen_names),]
# Avg expression and std error per cluster for selected genes
clusters_rm = ""
clusters_sd = ""
cluster_names = ""
counter = 1
for (i in col.scale){
# print(i)
mat.cluster = all_bar[, colnames(all_bar) %in% names(col.spatial.clusters[col.spatial.clusters == i,])]
clusters_rm_tmp = as.numeric(rowMeans(mat.cluster))
clusters_sd_tmp = as.numeric(rowSds(mat.cluster))/sqrt(ncol(mat.cluster))
clusters_rm = c(clusters_rm, clusters_rm_tmp)
clusters_sd = c(clusters_sd, clusters_sd_tmp)
cluster_names = c(cluster_names, rep(paste0("Cluster",counter), length(gen_names)))
counter=counter+1
}
clusters_rm = as.numeric(clusters_rm[-1])
clusters_sd = as.numeric(clusters_sd[-1])
cluster_names = cluster_names[-1]
gene_names = rep(row.names(all_bar), length(col.scale))
#get wilcoxons values cluster1 vs all
wilc_p = ""
for (j in rownames(all_bar)){
#print(j)
if ((j == "PRG4") | (j == "MMP3")| (j == "FN1")| (j == "TYROBP")) met = "less"
else met = "greater"
counter = 1
for (i in c(1:length(col.scale))){
if (i == 1){
#print(i)
clusters_rm_tmp1 = ""
clusters_rm_tmp2 = ""
mat.cluster1 = all_bar[j, colnames(all_bar) %in% names(col.spatial.clusters[col.spatial.clusters == col.scale[1],])]
tss = unique(sapply(strsplit(names(mat.cluster1),"_"),"[[",1))
for (nm in tss){
tmp = mat.cluster1[sapply(strsplit(names(mat.cluster1),"_"),"[[",1) == nm]
clusters_rm_tmp1 = c(clusters_rm_tmp1,mean(tmp))
}
mat.cluster2 = all_bar[j, colnames(all_bar) %in% names(col.spatial.clusters[col.spatial.clusters == col.scale[1],])]
tss = unique(sapply(strsplit(names(mat.cluster2),"_"),"[[",1))
for (nm in tss){
tmp = mat.cluster2[sapply(strsplit(names(mat.cluster2),"_"),"[[",1) == nm]
clusters_rm_tmp2 = c(clusters_rm_tmp2,mean(tmp))
}
clusters_rm_tmp1 = as.numeric(clusters_rm_tmp1[-1])
clusters_rm_tmp2 = as.numeric(clusters_rm_tmp2[-1])
#print(clusters_rm_tmp1)
#print(clusters_rm_tmp2)
wilc_p = c(wilc_p, 1)
} else {
#print(i)
clusters_rm_tmp1 = ""
clusters_rm_tmp2 = ""
mat.cluster1 = all_bar[j, colnames(all_bar) %in% names(col.spatial.clusters[col.spatial.clusters == col.scale[1],])]
tss = unique(sapply(strsplit(names(mat.cluster1),"_"),"[[",1))
for (nm in tss){
tmp = mat.cluster1[sapply(strsplit(names(mat.cluster1),"_"),"[[",1) == nm]
clusters_rm_tmp1 = c(clusters_rm_tmp1,mean(tmp))
}
mat.cluster2 = all_bar[j, colnames(all_bar) %in% names(col.spatial.clusters[col.spatial.clusters == col.scale[i],])]
tss = unique(sapply(strsplit(names(mat.cluster2),"_"),"[[",1))
for (nm in tss){
tmp = mat.cluster2[sapply(strsplit(names(mat.cluster2),"_"),"[[",1) == nm]
clusters_rm_tmp2 = c(clusters_rm_tmp2,mean(tmp))
}
clusters_rm_tmp1 = as.numeric(clusters_rm_tmp1[-1])
clusters_rm_tmp2 = as.numeric(clusters_rm_tmp2[-1])
#print(clusters_rm_tmp1)
#print(clusters_rm_tmp2)
if ((j == "CXCL13") | (j == "TYROBP") | (j == "CCL19") | (j == "LTB")){
if (j == "CXCL13"){
sv_cx1 = clusters_rm_tmp1}
if (j == "TYROBP"){
sv_ty1 = clusters_rm_tmp1}
if (j == "CCL19"){
sv_cc1 = clusters_rm_tmp1}
if (j == "LTB"){
sv_ltb1 = clusters_rm_tmp1}}
#print(met)
wilc_p = c(wilc_p, wilcox.test(clusters_rm_tmp1, clusters_rm_tmp2, paired = FALSE, alternative = met,exact=FALSE)$p.value)
}
}
}
sv_ty1 = as.numeric(sv_ty1)
sv_cx1 = as.numeric(sv_cx1)
sv_cc1 = as.numeric(sv_cc1)
sv_ltb1 = as.numeric(sv_ltb1)
#print("testing cxcl13 vs tyrobp per cluster 1")
#print(sv_cx1)
#print(sv_ty1)
#print(wilcox.test(sv_cx1, sv_ty1, paired = FALSE, alternative = 'less')$p.value)
#print("testing cxcl13 vs ltb per cluster 1")
#print(sv_cx1)
#print(sv_ltb1)
#print(wilcox.test(sv_cx1, sv_ltb1, paired = FALSE, alternative = 'less')$p.value)
#print("testing ccl21 vs tyrobp per cluster 1")
#print(sv_cc1)
#print(sv_ltb1)
#print(wilcox.test(sv_cc1, sv_ltb1, paired = FALSE, alternative = 'less')$p.value)
wilc_p = as.numeric(wilc_p[-1])
reordered_wilc_p = ""
for (i in 1:length(col.scale)){
reordered_wilc_p = c(reordered_wilc_p, wilc_p[seq(i, length(wilc_p), length(col.scale))])
}
reordered_wilc_p = as.numeric(reordered_wilc_p[-1])
signs_p= ""
for (i in reordered_wilc_p){
if (i>0.05) signs_p=c(signs_p, "ns")
if ((i<=0.05) & (i>0.01)) signs_p=c(signs_p, "*")
if ((i<=0.01) & (i>0.001)) signs_p=c(signs_p, "**")
if (i<=0.001) signs_p=c(signs_p, "***")
}
signs_p = signs_p[-1]
group2 = cluster_names
group1 = rep("Cluster1", length(signs_p))
# Plot barplot
myData = data.frame(clusters_rm, clusters_sd, cluster_names, gene_names,reordered_wilc_p,signs_p, group1, group2)
#print(myData)
limits <- aes(ymax = clusters_rm + clusters_sd,
ymin = clusters_rm - clusters_sd)
library(ggpubr)
p <- ggplot(data = myData, aes(x = factor(as.character(gene_names), levels = gen_names), y = clusters_rm, fill = cluster_names)) +
ylab(c("Avg Log(norm counts)")) + ylim(0, max(clusters_rm)+1)+ theme_bw() +
geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
scale_fill_manual(values = col.scale, aesthetics = "fill") +
geom_errorbar(mapping = limits, stat = "identity", position = position_dodge(width = 0.9), width = 0.3) +
#stat_pvalue_manual(reordered_wilc_p, label = signs_p, vjust = -1, bracket.nudge.y = 1) +
theme(axis.line.y = element_line(colour = "black"), axis.title.x = element_blank(), axis.ticks.x= element_blank(), axis.title.y = element_text(), axis.text.x = element_text(angle = 0),panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
return(p)
}
save_plot(paste0(path_output,"Average_genes_per_cluster_", norm_samples, ".pdf"), avg_genes_barplot(RA.norm, gen_names, col.spatial.clusters), ncol = 1, nrow = 1)
# first checks general changes in abundances in all samples (ex. b cells)
by_vs_am <- abun %>% group_by(sample, ct, section)
by_vs <- by_vs_am %>% summarise(meanct = mean(Avg))
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value < 0.05){
print("significant")
}
}
}
# check if cell type abundance changes are significant in all samples
fl = list.files(pattern = glob2rx("Average_sc_sigs_table_*"), path = path_output)
abun = matrix(nrow = 1, ncol = 6)
colnames(abun) = c("area","ct","Avg","inf","section","sample")
for (f in fl){
scabun = read.csv(paste0(path_output, f), sep = "\t")
abun = rbind(abun, scabun)
}
abun = abun[-1,]
# do some renaming
nm = c(abun["ct"])
ctypes = ""
for (i in nm){
ctypes = c(ctypes, paste(sapply(strsplit(i, "_"), "[[", 3),sapply(strsplit(i, "_"), "[[", 4), sep = "_"))
}
ctypes = ctypes[-1]
abun["ct"] = ctypes
# first checks general changes in abundances in all samples (ex. b cells)
by_vs_am <- abun %>% group_by(sample, ct, section)
by_vs <- by_vs_am %>% summarise(meanct = mean(Avg))
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) next
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value < 0.05){
print("significant")
}
}
}
# first checks general changes in abundances in infiltrates (ex. b cells)
by_vs_am <- abun %>% group_by(sample, ct, section, inf)
newinf = ""
for (i in by_vs_am$inf){
newinf = c(newinf,substr(i, start = 1, stop = 3))
}
newinf = newinf[-1]
by_vs_am$inf = newinf
by_vs <- by_vs_am %>% summarise(meanct = mean(Avg))
for (j in unique(by_vs$ct)){
by_vs_ct = by_vs[by_vs$ct == j,]
print(paste0("checking cell type: ", j))
for (i in 1:5){
print(paste0("RA",i))
if (length(by_vs_ct[by_vs_ct$sample == paste0("RA",i),]$meanct)==0) {
print("no cells")
next}
if (t.test(by_vs_ct[by_vs_ct$sample == paste0("RA",i) & by_vs_ct$inf == "inf",]$meanct,by_vs_ct[by_vs_ct$sample != paste0("RA",i),]$meanct, alternative = "greater")$p.value < 0.05){
print("significant")
}
}
}
